# REUSABLE WORKFLOW
# Sending data between steps and string manipulation

name: Main-flow
on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string


jobs:
  # ~ SETUP
  job1:
    name: setup
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.outputs.outputs.test }}
      output2: ${{ steps.outputs.outputs.test1 }}
      ROOT_DIR: ${{ steps.outputs.outputs.ROOT_DIR}}
      PROJECT:DIR: ${{ steps.outputs.outputs.PROJECT_DIR}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
        
      - name: Set Outputs
        id: outputs
        run: |
          echo "test=hello" >> $GITHUB_OUTPUT
          echo "test1=Perri" >> $GITHUB_OUTPUT
          echo "---------------- INPUT ----------------------"
          echo "Input recieved: ${{ inputs.path }}"
          echo "Actor: ${GITHUB_ACTOR}"
          echo "------------- MANIPULATION ------------------"
          echo "root_dir=(${{ inputs.path }} | cut -d'/' -f1)"
          echo "ROOT_DIR: ${root_dir}"
          echo "ROOT_DIR=${root_dir}" >> $GITHUB_OUTPUT
          echo ":::::::::::::::::::::::::::::::::::::::::::::"
          echo "PROJECT_DIR=$(echo ${{ inputs.path }} | cut -d'/' -f1)" >> $GITHUB_OUTPUT
          echo "PROJECT_DIR: ${PROJECT_DIR}"
          echo "------------- TEST ------------------"
          echo "Output: ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}"
          
          

  # ~ SONAR SCAN - NODE
  job2:
    needs: job1
    name: SonarScan-Node
    runs-on: ubuntu-latest
    steps:
      - name: Print
        run: |
          echo "Output: ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}"
          echo "Output: ${{needs.job1.outputs.output2}} ${{needs.job1.outputs.output2}}"
          echo "ROOT_DIR: ${{ needs.job1.outputs.ROOT_DIR }}"
          echo "PROJECT_DIR: ${{ needs.job1.outputs.PROJECT_DIR }}"



    # - name: string-manipulation
    #   id: string-manipulation
    #   run: |
    #     echo "--------------------------------------"
    #     echo "DIVIDE STRING"
    #     echo "--------------------------------------"
    #     echo "Using cut method by each '/'"
    #     myRootDir="$(echo ${{ inputs.path }} | cut -d'/' -f1)"
    #     myProjectDir="$(echo ${{ inputs.path }} | cut -d'/' -f2)"
    #     mySolutionDir="$(echo ${{ inputs.path }} | cut -d'/' -f3)"
    #     echo "Root: ${myRootDir}"
    #     echo "--------------------------------------"
    #     echo "PRINT STRING"
    #     echo "--------------------------------------"
    #     echo "input: ${{ inputs.path }}"
    #     echo "Root: ${myRootDir}"
    #     echo "Project: ${myProjectDir}"
    #     echo "Solution: ${mySolutionDir}"

    # - name: set-outputs
    #   id: data-outputs
    #   run: |
    #     echo "--------------------------------------"
    #     echo "DIVIDE STRING"
    #     echo "--------------------------------------"
    #     echo "Using cut method by each '/'"
    #     echo "root-output=$(echo ${{ inputs.path }} | cut -d'/' -f1) >> $GITHUB_OUTPUT
        
    #     project_dir_input="$(echo ${{ inputs.path }} | cut -d'/' -f2)" >> $GITHUB_OUTPUT
    #     solution_dir_input="${}echo ${{ input.path}} | cut -d'/' -f3)" >> $GITHUB_OUTPUT
    #     echo "project_dir_input (var): ${project_dir_input}"
    #     echo "project_output=${project_dir_input}" >> $GITHUB_OUTPUT
    #     mySolutionDir="$(echo ${{ inputs.path }} | cut -d'/' -f3)" >> $GITHUB_OUTPUT
    #     echo "--------------------------------------"
    #     echo "PRINT FROM OUTPUTS - SAME JOB"
    #     echo "--------------------------------------"
    #     echo "Root: ${{ needs.job1.outputs.ROOT_OUTPUT }}"
    #     echo "Project: ${{ needs.job1.outputs.PROJECT_OUTPUT }}"
    #     echo "Solution: ${{ needs.job1.outputs.SOLUTION_OUTPUT }}"
    #     echo "MySolution: ${{ needs.job1.outputs.mySoulution }}"

# test: making it dependent of previous step.
# -create outputs then -calls to those outputs

