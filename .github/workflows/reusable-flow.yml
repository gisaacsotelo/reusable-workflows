# REUSABLE WORKFLOW
# Sending data between steps and string manipulation

name: Main-flow
on:
  workflow_call:
    inputs:
      path:
        required: true
        type: string
      solution-matrix:
        required: true
        type: string

jobs:

  # ~ SETUP
  setup:
    name: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        solution-matrix: ${{ fromJSON(inputs.path-matrix) }}
    outputs:
      pat0: ${{ steps.setup.outputs.root-input }}
      pat1: ${{ steps.setup.outputs.project_input }}
      pat2: ${{ steps.setup.outputs.solution_input }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        id: setup
        run: |
          echo "-----------------------------------------------"
          input="${{ inputs.path-matrix }}"
          echo "Input: $input"
          echo "-----------------------------------------------"
          echo "Matrix: ${{ matrix.solution-matrix }}"
          echo "-----------------------------------------------"
          root_input="$(echo ${{ matrix.solution-matrix }} | cut -d'/' -f1)"
          echo 
          project_input="$(echo ${{ matrix.solution-matrix }} | cut -d'/' -f2)"
          solution_input="$(echo ${{ matrix.solution-matrix }} | cut -d'/' -f3)"
          echo "ROOT: ${root_input}"
          echo "PROJECT: ${project_input}"
          echo "SOLUTION: ${solution_input}"
          echo "-----------------------------------------------"
          echo "root-input=$root_input" >> $GITHUB_OUTPUT
          echo "project_input=$project_input" >> $GITHUB_OUTPUT
          echo "solution_input=${solution_input}" >> $GITHUB_OUTPUT
          echo "-----------------------------------------------"

      - name: Scan
        run: |
          echo "--------------------OK-------------------------"
          echo "-----------------------------------------------"
          echo "path0: ${{ needs.debug.outputs.path0 }}"
          echo "path1: ${{ needs.debug.outputs.path1 }}"
          echo "path2: ${{ needs.debug.outputs.path2 }}"
          echo "path2: ${{ needs.debug.outputs.path2 }}"
          echo "path2: ${{ env.path0 }}"

  # ~ SCAN
  scan:
    name: Sonar Cloud Scan
    needs: setup
    strategy:
      matrix: 
        solution-matrix: ${{ fromJSON(inputs.path-matrix) }}
    runs-on: ubuntu-latest
     steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Print
        run: |
          echo "Matrix: ${{ matrix.solution-matrix }}"
          path_0="$(echo ${{ matrix.solution-matrix }} | cut -d'/' -f1)
          path_1="$(echo ${{ matrix.solution-matrix }} | cut -d'/' -f2)
          path_2="$(echo ${{ matrix.solution-matrix }} | cut -d'/' -f3)
          echo "path0: ${{ path_0 }}"
          echo "path1: ${{ path_1 }}"
          echo "path2: ${{ path_2 }}"

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      # - name: Base64 encode token
      #   run: |
      #     echo "AZURE_ARTIFACTS_TOKEN_BASE64=$(echo -n ${AZURE_ARTIFACTS_TOKEN} | base64)" >> $GITHUB_ENV
      #   env:
      #     AZURE_ARTIFACTS_TOKEN: ${{ secrets.AZURE_ARTIFACTS_TOKEN }}

      - name: Jest
        working-directory: $path1
        run: |
          pwd
          console.log($path1)
        # env:
        #   AZURE_ARTIFACTS_TOKEN: ${{ env.AZURE_ARTIFACTS_TOKEN_BASE64 }}

      # - name: SonarCloudScan-Node
      #   uses: SonarSource/sonarcloud-github-action@master
      #   with:
      #     projectBaseDir: ${{ matrix.solution-name }}
      #     args: >
      #       -Dsonar.organization=zenergy
      #       -Dsonar.projectKey=zenergy_${{ needs.job1.outputs.ROOT_DIR }}_${{  matrix.solution-name }}
      #       -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
      #       -Dsonar.coverage.exclusions=**/*.test.ts
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # job1:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Setup Data
  #       id: setup
  #       run: |
  #         echo "-----------------------------------------------"
  #         input="${{ inputs.path-matrix }}"
  #         echo "Input: $input"
  #         echo "-----------------------------------------------"

  #         echo "-----------------------------------------------"











  # ~ SETUP
  # job1:
  #   name: setup
  #   runs-on: ubuntu-latest
  #   # outputs:
  #   #   output1: ${{ steps.outputs.outputs.test }}
  #   #   output2: ${{ steps.outputs.outputs.test1 }}
  #   #   ROOT_DIR: ${{ steps.outputs.outputs.ROOT_DIR}}
  #   #   PROJECT_DIR: ${{ steps.outputs.outputs.PROJECT_DIR}}
  #   structure: ${{ steps.structure.outputs.structure }}

  #   steps:
  #     - name: Set Structure of Scan
  #       id: structure
  #       run: |
  #         echo "----------------------------------------------"
  #         input_string="${{ inputs.path }}"
  #         echo "Input Recieved: ${input_string}"
  #         echo "----------------------------------------------"
  #         single_path="$(echo ${{ inputs.path }} | cut -d' ' -f1)"
  #         echo "Single path: ${single_path}"
  #         echo "----------------------------------------------"
  #         solution_dir="$(echo ${single_path} | cut -d '/' -f3)"
  #         echo "solution_dir: ${solution_dir}"
  #         if [ ${solution_dir} == "" ]; then
  #           repo_structure="standard"
  #           echo "structure: ${repo_structure}"
  #         else
  #           repo_structure="mono"
  #           echo "structure: ${repo_structure}"
  #         fi
  #         echo "----------------------------------------------"
  #         echo "structure=${repo_structure}" >> $GITHUB_OUTPUT

  #     - name: Set Array
  #       id: outputs
  #       run: |
  #         echo "----------------------------------------------"
  #         input_string="${{ inputs.path }}"
  #         echo "Input Recieved: ${input_string}"
  #         echo "----------------------------------------------"
  #         single_path="$(echo ${{ inputs.path }} | cut -d' ' -f1)"
  #         echo "Single path: ${single_path}"
  #         echo "----------------------------------------------"
  #         solution_dir="$(echo ${single_path} | cut -d '/' -f3)"
  #         echo "solution_dir: ${solution_dir}"
  #         if [ ${solution_dir} == "" ]; then
  #           repo_structure="standard"
  #           echo "structure: ${repo_structure}"
  #         else
  #           repo_structure="mono"
  #           echo "structure: ${repo_structure}"
  #         fi
  #         echo "----------------------------------------------"
  #         echo "structure=${repo_structure}" >> $GITHUB_OUTPUT